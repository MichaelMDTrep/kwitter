{"version":3,"sources":["serviceWorker.js","components/loader/Loader.js","utils/api.js","redux/actions/auth.js","components/login-form/LoginForm.enhancer.js","components/login-form/index.js","components/login-form/LoginForm.js","redux/actions/messages.js","components/menu/Menu.enhancer.js","components/menu/Menu.js","components/menu/index.js","screens/Home.js","components/profile-card/profileCard.js","redux/actions/users.js","components/UpdateProfile/UpdateProfile.enhancer.js","components/UpdateProfile/index.js","components/UpdateProfile/UpdateProfile.js","screens/Profile.js","screens/NotFound.js","screens/NewUserScreen.js","components/MessagesIn/MessagesIn.enhancer.js","components/MessageDisplayCard/MessageDisplayCard.enhancer.js","components/Likes/Likes.enhancer.js","redux/actions/Actions.js","components/Likes/index.js","components/Likes/Likes.js","components/MessageDisplayCard/index.js","components/MessageDisplayCard/MessageDisplayCard.js","components/MessagesOut/MessagesOut.enhancer.js","components/MessagesOut/index.js","components/MessagesOut/MessagesOut.js","components/MessagesIn/MessagesIn.js","components/MessagesIn/index.js","screens/MessageFeedScreen.js","components/connected-route/ConnectedRoute.js","components/navigation/Navigation.js","components/create-user/CreateUser.enhancer.js","components/create-user/index.js","components/create-user/CreateUser.js","redux/reducers/auth.js","redux/reducers/messages.js","redux/reducers/users.js","redux/reducers/likes.js","redux/reducers/index.js","redux/configureStore.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Loader","helpMeInstructor","err","console","info","getToken","storedState","JSON","parse","localStorage","getItem","auth","isAuthenticated","axiosInstance","axios","create","baseURL","timeout","headers","Authorization","interceptors","request","use","config","error","Promise","reject","response","data","this","username","password","post","result","get","log","stringify","photo","put","displayName","about","patch","delete","messageText","text","messageid","likeId","LOGIN","mapDispatchToProps","login","credentials","dispatch","getState","a","type","api","payload","message","enhancer","connect","state","loading","LoginFormContainer","useState","setState","handleChange","event","inputName","target","name","inputValue","value","prevState","Fragment","Form","id","style","alignItems","onSubmit","preventDefault","htmlFor","autoFocus","required","onChange","Button","disabled","color","GET_MESSAGES","messagesIn","logout","Menu","to","onClick","defaultProps","MenuContainer","HomeScreen","ProfileCard","props","handleLoadingClick","setTimeout","getUserInfoAction","fontWeight","user","Image","size","src","alt","createdAt","Component","getUserInfo","getPhoto","getUserPicture","DisplayCardContainer","users","updateProfile","deleteProfile","uploadPhoto","setUserPicture","UpdateProfileContainer","picture","Label","Input","isRequired","placeholder","icon","formData","FormData","append","accept","files","fontsize","ProfileScreen","NotFoundScreen","pathname","NewUserScreen","CreateUserContainer","content","messages","messageList","sendlike","sendingVar","messageId","like","removeLike","likes","LikesButtonContainer","array","map","index","key","inverted","Content","hidden","visible","Icon","MessageDisplayCardContainer","Card","className","border","paddingleft","height","width","backgroundColor","borderRadius","List","class","timestamp","messagesOut","MessagesOutContainer","inputField","MessagesIn","MessagesInContainer","MessageFeedScreen","ConnectedRoute","isProtected","redirectIfAuthenticated","ComponentToRender","component","rest","Error","useSelector","render","from","renderedProps","Navigation","exact","path","newUser","createUser","INITIAL_STATE","combineReducers","action","token","persistConfig","storage","persistedReducer","persistReducer","rootReducer","preloadedState","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","configureStore","KWITTER","App","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e29b00f2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\n/*\r\nhttps://lmgtfy.com/?q=react+loading+spinner+components\r\nThere are many more on the web use one of these or create your own!\r\n*/\r\n\r\nexport const Loader = () => <>LOADING.......</>;\r\n","import axios from \"axios\";\r\nconst text = \"text\";\r\nclass API {\r\n  axiosInstance = null;\r\n\r\n  constructor() {\r\n    /* \r\n      🚨1 point EXTRA CREDIT 🚨 👉🏿 get the baseURL from the environment\r\n      https://create-react-app.dev/docs/adding-custom-environment-variables/\r\n    */\r\n    const axiosInstance = axios.create({\r\n      baseURL: \"https://kwitter-api.herokuapp.com\",\r\n      timeout: 30000,\r\n      headers: { Authorization: `Bearer ${getToken()}` },\r\n    });\r\n\r\n    // Add a request interceptor to attach a\r\n    axiosInstance.interceptors.request.use(\r\n      (config) => ({\r\n        ...config,\r\n        headers: {\r\n          ...config.headers,\r\n          Authorization: `Bearer ${getToken()}`,\r\n        },\r\n      }),\r\n      (error) => Promise.reject(error)\r\n    );\r\n\r\n    // Add a response interceptor\r\n    axiosInstance.interceptors.response.use(\r\n      ({ data }) => data,\r\n      (error) => Promise.reject(error)\r\n    );\r\n\r\n    this.axiosInstance = axiosInstance;\r\n  }\r\n\r\n  async login({ username, password }) {\r\n    try {\r\n      const result = await this.axiosInstance.post(\"/auth/login\", {\r\n        username,\r\n        password,\r\n      });\r\n      return result;\r\n    } catch (err) {\r\n      // Instructor is logging you out because this failed\r\n      helpMeInstructor(err);\r\n      return err;\r\n    }\r\n  }\r\n\r\n  async getUserInfo(username) {\r\n    try {\r\n      const result = await this.axiosInstance.get(`/users/${username}`);\r\n      console.log(\"getUserInfo\" + JSON.stringify(result));\r\n      return result;\r\n    } catch (err) {\r\n      helpMeInstructor(err);\r\n      return err;\r\n    }\r\n  }\r\n\r\n  async getUserPicture(username) {\r\n    try {\r\n      const result = await this.axiosInstance.get(`/users/${username}/picture`);\r\n      console.log(\"getUserPicture: \" + result);\r\n      // can't use result\r\n      return result;\r\n    } catch (err) {\r\n      helpMeInstructor(err);\r\n      return err;\r\n    }\r\n  }\r\n\r\n  async setUserPicture(photo, username) {\r\n    try {\r\n      //sending the wrong data\r\n      const result = await this.axiosInstance.put(\r\n        `/users/${username}/picture`,\r\n        photo\r\n      );\r\n      console.log(\"setUserPicture\" + JSON.stringify(result));\r\n      return result;\r\n    } catch (err) {\r\n      helpMeInstructor(err);\r\n      return err;\r\n    }\r\n  }\r\n\r\n  async createUser({ username, displayName, password }) {\r\n    try {\r\n      const result = await this.axiosInstance.post(\"/users\", {\r\n        username,\r\n        displayName,\r\n        password,\r\n      });\r\n      console.log(\"createUser\" + JSON.stringify(result));\r\n      return result;\r\n    } catch (err) {\r\n      helpMeInstructor(err);\r\n      return err;\r\n    }\r\n  }\r\n  async updateProfile({ password, about, displayName, username }) {\r\n    try {\r\n      console.log({ password, about, displayName, username });\r\n      const result = await this.axiosInstance.patch(`/users/${username}`, {\r\n        password,\r\n        about,\r\n        displayName,\r\n      });\r\n      console.log(\"updateProfile's result:\" + JSON.stringify(result));\r\n      return result;\r\n    } catch (err) {\r\n      helpMeInstructor(err);\r\n      return err;\r\n    }\r\n  }\r\n\r\n  async messagesIn() {\r\n    try {\r\n      const result = await this.axiosInstance.get(\r\n        \"/messages?limit=100&offset=0\"\r\n      );\r\n      console.log(\"messages: \" + JSON.stringify(result));\r\n      return result;\r\n    } catch (err) {\r\n      helpMeInstructor(err);\r\n      return err;\r\n    }\r\n  }\r\n\r\n  async deleteProfile(username) {\r\n    try {\r\n      console.log(\"out: \" + username);\r\n      const result = await this.axiosInstance.delete(`/users/${username}`);\r\n      console.log(result);\r\n    } catch (err) {\r\n      helpMeInstructor(err);\r\n    }\r\n  }\r\n\r\n  async messagesOut(messageText) {\r\n    try {\r\n      console.log(messageText);\r\n      const result = await this.axiosInstance.post(\"/messages\", {\r\n        text: messageText,\r\n      });\r\n      console.log(\"messageOut: \" + JSON.stringify(result));\r\n      return result;\r\n    } catch (err) {\r\n      helpMeInstructor(err);\r\n      return err;\r\n    }\r\n  }\r\n\r\n  async like(messageid) {\r\n    try {\r\n      console.log(\"messageid=\" + messageid);\r\n      const result = await this.axiosInstance.post(\"/likes\", messageid);\r\n      console.log(\"result\" + JSON.stringify(result));\r\n      return result;\r\n    } catch (err) {\r\n      helpMeInstructor(err);\r\n      return err;\r\n    }\r\n  }\r\n\r\n  async removeLike(likeId) {\r\n    try {\r\n      console.log(\"sent data:\" + likeId);\r\n      const result = await this.axiosInstance.delete(`/likes/${likeId}`);\r\n      console.log(result);\r\n    } catch (err) {\r\n      helpMeInstructor(err);\r\n      return err;\r\n    }\r\n  }\r\n  async logout() {\r\n    try {\r\n      await this.axiosInstance.get(\"/auth/logout\");\r\n    } catch (err) {\r\n      helpMeInstructor(err);\r\n      return err;\r\n    }\r\n  }\r\n}\r\n\r\n// WARNING.. do not touch below this line if you want to have a good day =]\r\n\r\nfunction helpMeInstructor(err) {\r\n  console.info(\r\n    `\r\n    Did you hit CORRECT the endpoint?\r\n    Did you send the CORRECT data?\r\n    Did you make the CORRECT kind of request [GET/POST/PATCH/DELETE]?\r\n    Check the Kwitter docs 👉🏿 https://kwitter-api.herokuapp.com/docs/#/\r\n    Check the Axios docs 👉🏿 https://github.com/axios/axios\r\n    TODO: troll vince pew pew lazer beams\r\n  `,\r\n    err\r\n  );\r\n}\r\n\r\nfunction getToken() {\r\n  try {\r\n    const storedState = JSON.parse(localStorage.getItem(\"persist:root\"));\r\n    return JSON.parse(storedState.auth).isAuthenticated;\r\n  } catch {\r\n    return \"\";\r\n  }\r\n}\r\nexport default new API();\r\n","import api from \"../../utils/api\";\r\n\r\n// AUTH CONSTANTS\r\nexport const LOGIN = \"AUTH/LOGIN\";\r\nexport const LOGIN_SUCCESS = \"AUTH/LOGIN_SUCCESS\";\r\nexport const LOGIN_FAILURE = \"AUTH/LOGIN_FAILURE\";\r\nexport const LOGOUT = \"AUTH/LOGOUT\";\r\nexport const NEW_USER = \"AUTH/NEW_USER\";\r\nexport const NEW_USER_SUCCESS = \"NEW_USER_SUCCESS\";\r\nexport const GET_LIKES = \"GET_LIKES\";\r\n/*\r\n AUTH ACTIONS (this is a thunk....)\r\n THUNKS: --> https://github.com/reduxjs/redux-thunk#whats-a-thunk\r\n If you need access to your store you may call getState()\r\n*/\r\n\r\n//\r\nexport const login = (credentials) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: LOGIN });\r\n    const payload = await api.login(credentials);\r\n    // ℹ️ℹ️This is how you woud debug the response to a requestℹ️ℹ️\r\n    console.log({ payload });\r\n    dispatch({ type: LOGIN_SUCCESS, payload });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: LOGIN_FAILURE,\r\n      payload: err.message,\r\n    });\r\n  }\r\n};\r\nexport const newUser = (credentials) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: NEW_USER });\r\n    const payload = await api.createUser(credentials);\r\n    console.log(\"payload: \" + payload); // doesn't do anything\r\n\r\n    dispatch({ type: NEW_USER_SUCCESS, payload });\r\n    // alert(\"you made ur account\");\r\n  } catch (err) {\r\n    dispatch({ type: LOGIN_FAILURE, payload: err.message });\r\n  }\r\n};\r\nexport const logout = () => async (dispatch, getState) => {\r\n  try {\r\n    // We do not care about the result of logging out\r\n    // as long as it succeeds\r\n    await api.logout();\r\n  } finally {\r\n    /**\r\n     * Let the reducer know that we are logged out\r\n     */\r\n    dispatch({ type: LOGOUT });\r\n  }\r\n};\r\n// END AUTH ACTIONS\r\n","import { connect } from \"react-redux\";\r\nimport { login } from \"../../redux/actions/auth\";\r\n\r\n// https://react-redux.js.org/using-react-redux/connect-mapstate#connect-extracting-data-with-mapstatetoprops\r\nconst mapStateToProps = (state) => ({\r\n  loading: state.auth.loading,\r\n  error: state.auth.error,\r\n});\r\n\r\n// https://react-redux.js.org/using-react-redux/connect-mapdispatch#connect-dispatching-actions-with-mapdispatchtoprops\r\nconst mapDispatchToProps = {\r\n  login,\r\n};\r\n\r\nexport const enhancer = connect(mapStateToProps, mapDispatchToProps);\r\n","import { enhancer } from \"./LoginForm.enhancer\";\r\nimport { LoginForm } from \"./LoginForm\";\r\n\r\nexport const LoginFormContainer = enhancer(LoginForm);\r\n","import React, { useState } from \"react\";\r\nimport ProptTypes from \"prop-types\";\r\nimport { Loader } from \"../loader\";\r\nimport \"./LoginForm.css\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\n\r\nexport const LoginForm = ({ login, loading, error }) => {\r\n  // Not to be confused with \"this.setState\" in classes\r\n  const [state, setState] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const handleLogin = (event) => {\r\n    event.preventDefault();\r\n    login(state);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const inputName = event.target.name;\r\n    const inputValue = event.target.value;\r\n    setState((prevState) => ({ ...prevState, [inputName]: inputValue }));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Form\r\n        id=\"login-form\"\r\n        style={{ alignItems: \"center\" }}\r\n        onSubmit={handleLogin}\r\n      >\r\n        <label htmlFor=\"username\">Username</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={state.username}\r\n          autoFocus\r\n          required\r\n          onChange={handleChange}\r\n        />\r\n        <label htmlFor=\"password\">Password</label>\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={state.password}\r\n          required\r\n          onChange={handleChange}\r\n        />\r\n        <Button type=\"submit\" disabled={loading}>\r\n          Login\r\n        </Button>\r\n      </Form>\r\n      {loading && <Loader />}\r\n      {/*  */}\r\n      {error && <p style={{ color: \"red\" }}>{error.message}</p>}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nLoginForm.propTypes = {\r\n  login: ProptTypes.func.isRequired,\r\n  loading: ProptTypes.bool,\r\n  error: ProptTypes.string,\r\n};\r\n","import api from \"../../utils/api\";\r\n\r\n// MESSAGE CONSTANTS\r\nexport const GET_MESSAGES = \"MESSAGES/GET_MESSAGES\";\r\nexport const GET_MESSAGES_SUCCESS = \"MESSAGES/GET_MESSAGES_SUCCESS\";\r\nexport const GET_MESSAGES_FAILURE = \"MESSAGES/GET_MESSAGES_FAILURE\";\r\nexport const SEND_MESSAGES = \"MESSAGES/SEND_MESSAGES\";\r\nexport const SEND_MESSAGES_SUCCESS = \"MESSAGES/SEND_MESSAGES_SUCCESS\";\r\nexport const SEND_MESSAGES_FAILURE = \"MESSAGES/SEND_MESSAGES_FAILURE\";\r\n\r\n/*\r\n MESSAGE ACTIONS (this is a thunk....)\r\n THUNKS: --> https://github.com/reduxjs/redux-thunk#whats-a-thunk\r\n If you need access to your store you may call getState()\r\n*/\r\n\r\nexport const messagesIn = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: GET_MESSAGES });\r\n    const payload = await api.messagesIn();\r\n    console.log({ payload });\r\n    dispatch({ type: GET_MESSAGES_SUCCESS, payload });\r\n  } catch (err) {\r\n    dispatch({ type: GET_MESSAGES_FAILURE, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const messagesOut = (messageText) => async (dispatch, getState) => {\r\n  try {\r\n    // dispatch({ type: SEND_MESSAGES });\r\n    console.log(messageText);\r\n    const payload = await api.messagesOut(messageText);\r\n    console.log({ payload });\r\n    // dispatch({ type: SEND_MESSAGES_SUCCESS, payload });\r\n  } catch (err) {\r\n    return;\r\n    // dispatch({ type: SEND_MESSAGES_FAILURE, payload: err.message });\r\n  }\r\n};\r\n// END messeges ACTIONS\r\n\r\nexport const updateAfterPosting = (messageData) => (dispatch) => {\r\n  return dispatch(postMessage(messageData)).then(() =>\r\n    dispatch(GET_MESSAGES())\r\n  );\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { logout } from \"../../redux/actions/auth\";\r\nimport { messagesIn } from \"../../redux/actions/messages\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: !!state.auth.isAuthenticated,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  logout,\r\n  messagesIn,\r\n};\r\n\r\nexport const enhancer = connect(mapStateToProps, mapDispatchToProps);\r\n","import React from \"react\";\r\nimport ProptTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Menu.css\";\r\n\r\nexport const Menu = ({ isAuthenticated, logout }) => {\r\n  return (\r\n    <div id=\"menu\">\r\n      <h1>Kwitter</h1>\r\n      <Link to=\"/\">Home </Link>\r\n      {isAuthenticated && (\r\n        <div id=\"menu-links\">\r\n          <Link to=\"/messagefeed\">Message Feed </Link>\r\n          <Link to=\"/\" onClick={logout}>\r\n            Logout{\" \"}\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nMenu.defaultProps = {\r\n  isAuthenticated: false,\r\n  logout: () => {},\r\n};\r\n\r\nMenu.propTypes = {\r\n  isAuthenticated: ProptTypes.bool.isRequired,\r\n  logout: ProptTypes.func.isRequired,\r\n  messagesIn: ProptTypes.func.isRequired,\r\n};\r\n","import { enhancer } from \"./Menu.enhancer\";\r\nimport { Menu } from \"./Menu\";\r\n\r\nexport const MenuContainer = enhancer(Menu);\r\n","import React from \"react\";\r\nimport { LoginFormContainer, MenuContainer } from \"../components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const HomeScreen = () => (\r\n  <>\r\n    <MenuContainer />\r\n    <h2>Your favorite microblogging platform</h2>\r\n    <LoginFormContainer />\r\n    <Link to=\"/newuser\">New? Create your account here.</Link>\r\n  </>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { Image } from \"semantic-ui-react\";\r\nimport { getUserInfoAction, getPhoto } from \"../../redux/actions/users\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass ProfileCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { loading: false };\r\n  }\r\n\r\n  handleLoadingClick = () => {\r\n    this.setState({ loading: true });\r\n\r\n    setTimeout(() => {\r\n      this.setState({ loading: false });\r\n    }, 3000);\r\n  };\r\n\r\n  showDisplayName() {\r\n    const foo = \"tacos\";\r\n    return foo;\r\n  }\r\n  componentDidMount() {\r\n    return this.props.getUserInfoAction(this.props.username);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <ul>\r\n          <li style={{ fontWeight: \"bolder\" }}>\r\n            {\" \"}\r\n            username:{\"  \"}\r\n            {this.props.username || null}\r\n          </li>\r\n          <li style={{ fontWeight: \"bolder\" }}>\r\n            displayName: {this.props.user && this.props.user[\"displayName\"]}\r\n          </li>\r\n          pic local:{\" \"}\r\n          <li style={{ fontWeight: \"bolder\" }}>\r\n            <Image\r\n              size=\"small\"\r\n              src={`https://kwitter-api.herokuapp.com/users/${this.props.username}/picture`}\r\n              alt=\"Profile Picture\"\r\n            />\r\n          </li>\r\n          <br />\r\n          <li style={{ fontWeight: \"bolder\" }}>\r\n            <p>about: {(this.props.user && this.props.user.about) || \"null\"}</p>\r\n          </li>\r\n          <li style={{ fontWeight: \"bolder\" }}>\r\n            account created at:{\" \"}\r\n            {(this.props.user && this.props.user.createdAt) || null}\r\n          </li>\r\n          <li style={{ fontWeight: \"lighter\" }}> password: *HIDDEN_VALUE*</li>{\" \"}\r\n        </ul>\r\n      </>\r\n\r\n      //     <Card.Group doubling itemsPerRow={3} stackable>\r\n      //       {cards.map( (card) => (\r\n      //         <Card key={card.header}>\r\n      //           {loading ? (\r\n      //             <Placeholder>\r\n      //               <Placeholder.Image square />\r\n      //             </Placeholder>\r\n      //           ) : (\r\n      //             <Image src={card.avatar} />\r\n      //           )}\r\n\r\n      //           <Card.Content>\r\n      //             {loading ? (\r\n      //               <Placeholder>\r\n      //                 <Placeholder.Header>\r\n      //                   <Placeholder.Line length='very short' />\r\n      //                   <Placeholder.Line length='medium' />\r\n      //                 </Placeholder.Header>\r\n      //                 <Placeholder.Paragraph>\r\n      //                   <Placeholder.Line length='short' />\r\n      //                 </Placeholder.Paragraph>\r\n      //               </Placeholder>\r\n      //             ) : (\r\n      //               <Fragment>\r\n      //                 <Card.Header>{card.header}</Card.Header>\r\n      //                 <Card.Meta>{card.date}</Card.Meta>\r\n      //                 <Card.Description>{card.description}</Card.Description>\r\n      //               </Fragment>\r\n      //             )}\r\n      //           </Card.Content>\r\n\r\n      //           <Card.Content extra>\r\n      //             <Button disabled={loading} primary>\r\n      //               Add\r\n      //             </Button>\r\n      //             <Button disabled={loading}>Delete</Button>\r\n      //           </Card.Content>\r\n      //         </Card>\r\n      //       ))}\r\n      //     </Card.Group>\r\n      //   </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.users.user.user,\r\n    username: state.auth.username,\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  getUserInfoAction,\r\n  getPhoto,\r\n};\r\n\r\nexport const DisplayCardContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ProfileCard);\r\n","import api from \"../../utils/api\";\r\n\r\n// AUTH CONSTANTS\r\nexport const GETUSERINFO = \"GETUSERINFO\";\r\nexport const GETUSERINFO_SUCCESS = \"GETUSERINFO_SUCCESS\";\r\nexport const GETUSERINFO_FAILURE = \"GETUSERINFO_FAILURE\";\r\nexport const UPDATE = \"UPDATE\";\r\nexport const UPDATE_SUCCESS = \"UPDATE_SUCCESS\";\r\nexport const UPDATE_FAIL = \"UPDATE_FAIL\";\r\nexport const getUserInfoAction = (username) => async (dispatch, getState) => {\r\n  try {\r\n    // let username = getState().auth.username;\r\n    dispatch({ type: GETUSERINFO });\r\n\r\n    let payload = await api.getUserInfo(username);\r\n    // ℹ️ℹ️This is how you woud debug the response to a requestℹ️ℹ️\r\n    console.log(\"here:\" + JSON.stringify(payload));\r\n    dispatch({ type: GETUSERINFO_SUCCESS, payload });\r\n    return JSON.stringify(payload);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GETUSERINFO_FAILURE,\r\n      payload: err.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const uploadPhoto = (photo) => async (dispatch, getState) => {\r\n  try {\r\n    let username = getState().auth.username;\r\n    console.log(photo);\r\n    const payload = await api.setUserPicture(photo, username);\r\n    console.log(\"payload\" + payload);\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\nexport const getPhoto = (username) => async (dispatch, getState) => {\r\n  try {\r\n    console.log(\"username:\" + username);\r\n    const payload = await api.getUserPicture(username);\r\n    const data = JSON.stringify(payload);\r\n\r\n    console.log(\"payload\" + data);\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n\r\nexport const updateProfile = ({ password, about, displayName }) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  try {\r\n    // we need to only submit completed fields\r\n    console.log(\"outgoingData:\" + password);\r\n    console.log(\"outgoingData:\" + about);\r\n    console.log(\"outgoingData:\" + displayName);\r\n    const username = getState().auth.username;\r\n    const payload = await api.updateProfile({\r\n      password,\r\n      about,\r\n      displayName,\r\n      username,\r\n    });\r\n    console.log(\"payload\" + payload);\r\n    // update state with an action\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GETUSERINFO_FAILURE,\r\n      payload: err.message,\r\n    });\r\n    return err;\r\n  }\r\n};\r\n\r\nexport const deleteProfile = ({ username }) => async (dispatch, getState) => {\r\n  try {\r\n    console.log(\"ur dead\" + username);\r\n    const payload = await api.deleteProfile(username);\r\n    console.log(payload);\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n\r\n//saftey code!!\r\n//   import api from \"../../utils/api\";\r\n\r\n// // AUTH CONSTANTS\r\n// export const GETUSERINFO = \"GETUSERINFO\";\r\n// export const GETUSERINFO_SUCCESS = \"GETUSERINFO_SUCCESS\";\r\n// export const GETUSERINFO_FAILURE = \"GETUSERINFO_FAILURE\";\r\n\r\n// export const getUserInfoAction = () => async (dispatch, getState) => {\r\n//     try {\r\n//        //let username = getState().auth.username\r\n//       dispatch({ type: GETUSERINFO });\r\n//       const payload = await api.getUserInfo('mattymomo93');\r\n//       // ℹ️ℹ️This is how you woud debug the response to a requestℹ️ℹ️\r\n//       console.log({ payload });\r\n//       dispatch({ type: GETUSERINFO_SUCCESS, payload });\r\n//       return payload\r\n//     } catch (err) {\r\n//       dispatch({\r\n//         type: GETUSERINFO_FAILURE,\r\n//         payload: err.message,\r\n//       });\r\n//     }\r\n//   };\r\n","import { connect } from \"react-redux\";\r\nimport {\r\n  updateProfile,\r\n  deleteProfile,\r\n  uploadPhoto,\r\n} from \"../../redux/actions/users\";\r\n\r\n// https://react-redux.js.org/using-react-redux/connect-mapstate#connect-extracting-data-with-mapstatetoprops\r\nconst mapStateToProps = (state) => ({\r\n  loading: state.auth.loading,\r\n  error: state.auth.error,\r\n  username: state.auth.username,\r\n});\r\n\r\n// https://react-redux.js.org/using-react-redux/connect-mapdispatch#connect-dispatching-actions-with-mapdispatchtoprops\r\nconst mapDispatchToProps = {\r\n  updateProfile,\r\n  deleteProfile,\r\n  uploadPhoto,\r\n};\r\n\r\nexport const enhancer = connect(mapStateToProps, mapDispatchToProps);\r\n","import { enhancer } from \"./UpdateProfile.enhancer\";\r\nimport { UpdateProfile } from \"./UpdateProfile\";\r\n\r\nexport const UpdateProfileContainer = enhancer(UpdateProfile);\r\n\r\n// export * from \"./CreateUser\";\r\n","import React, { useState } from \"react\";\r\nimport ProptTypes from \"prop-types\";\r\nimport { Loader } from \"../loader\";\r\nimport \"./UpdateProfile.css\";\r\n// import { updateProfile } from \"../../redux/actions\";\r\nimport { Button, Label, Input, Form } from \"semantic-ui-react\";\r\n// console.log(\"updateProfile is : \" + updateProfile.toString());\r\nexport const UpdateProfile = ({\r\n  updateProfile,\r\n  deleteProfile,\r\n  uploadPhoto,\r\n  loading,\r\n  error,\r\n  username,\r\n}) => {\r\n  // Not to be confused with \"this.setState\" in classes\r\n  const [state, setState] = useState({\r\n    // username: \"\",\r\n    password: \"\",\r\n    about: \"\",\r\n    displayName: \"\",\r\n    picture: null,\r\n  });\r\n\r\n  const handleUpdateProfile = (event) => {\r\n    event.preventDefault();\r\n    updateProfile(state);\r\n  };\r\n  const handleUploadPhoto = (event) => {\r\n    console.log(event, state.picture);\r\n    event.preventDefault();\r\n    let formData = new FormData();\r\n    formData.append(\"picture\", state.picture);\r\n    uploadPhoto(formData);\r\n  };\r\n  const handleChange = (event) => {\r\n    const inputName = event.target.name;\r\n    const inputValue = event.target.value;\r\n    setState((prevState) => ({ ...prevState, [inputName]: inputValue }));\r\n  };\r\n  const handleChangePicture = (event) => {\r\n    const inputName = event.target.name;\r\n    const inputValue = event.target.files[0];\r\n    setState((prevState) => ({ ...prevState, [inputName]: inputValue }));\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Form id=\"login-form\" onSubmit={handleUpdateProfile}>\r\n        <Label size=\"huge\" color=\"blue\" htmlFor=\"about\">\r\n          Whats your story?\r\n        </Label>\r\n        <Input\r\n          isRequired\r\n          type=\"text\"\r\n          name=\"about\"\r\n          placeholder=\"tell us your story\"\r\n          icon=\"address card\"\r\n          value={state.about}\r\n          autoFocus\r\n          onChange={handleChange}\r\n        />\r\n        <Label size=\"huge\" color=\"blue\">\r\n          Change your name?\r\n        </Label>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"displayName\"\r\n          value={state.displayName}\r\n          onChange={handleChange}\r\n          placeholder=\"Change Your displayName\"\r\n        />\r\n        <Label size=\"huge\" color=\"blue\" htmlFor=\"password\">\r\n          password is required to update your account.\r\n        </Label>\r\n        <Input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={state.password}\r\n          onChange={handleChange}\r\n          placeholder=\"Change Your Password\"\r\n        />\r\n        <Button color=\"purple\" type=\"submit\" disabled={loading}>\r\n          Update Profile\r\n        </Button>\r\n      </Form>\r\n      <Form id=\"login-form\" onSubmit={handleUploadPhoto}>\r\n        <Label size=\"huge\" color=\"blue\" htmlFor=\"picture\">\r\n          {\"tired of your old look?\"}\r\n          <br />\r\n          {\"fancify your profile with a <200 kb picture\"}\r\n        </Label>\r\n        <Input\r\n          icon=\"paperclip\"\r\n          type=\"file\"\r\n          accept=\"image/png, image/jpeg\"\r\n          name=\"picture\"\r\n          onChange={handleChangePicture}\r\n        />\r\n        <Button color=\"purple\" type=\"submit\">\r\n          upload\r\n        </Button>\r\n        {/* //Button, send file img only?. */}\r\n      </Form>\r\n      <hr />\r\n      <p>\r\n        This will permanemtly and immediatly delete your account.\r\n        <br />\r\n        Also it'll totally bum out your all your buddies, who just want to chat\r\n        and hang out and stuff.\r\n        <br />\r\n      </p>\r\n      <Button\r\n        color=\"black\"\r\n        size=\"massive\"\r\n        style={{ fontsize: \"biggest\", color: \"red\" }}\r\n        onClick={() => {\r\n          deleteProfile({ username });\r\n        }}\r\n      >\r\n        DELETE YOUR ACCOUNT\r\n      </Button>\r\n\r\n      {loading && <Loader />}\r\n      {error && <p style={{ color: \"red\" }}>{error.message}</p>}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nUpdateProfile.propTypes = {\r\n  deleteProfile: ProptTypes.func.isRequired,\r\n  updateProfile: ProptTypes.func.isRequired,\r\n  uploadPhoto: ProptTypes.func.isRequired,\r\n  loading: ProptTypes.bool,\r\n  error: ProptTypes.string,\r\n  username: ProptTypes.string,\r\n};\r\n","import React from \"react\";\r\nimport { MenuContainer } from \"../components\";\r\nimport { DisplayCardContainer } from \"../components/profile-card\";\r\nimport { UpdateProfileContainer } from \"../components/UpdateProfile\";\r\nexport const ProfileScreen = () => (\r\n  <>\r\n    <MenuContainer />\r\n    <h2>Profile</h2>\r\n    <DisplayCardContainer />\r\n    <h2>Want to update your account?</h2>\r\n    <UpdateProfileContainer />\r\n\r\n    {/* <ProfilePic /> */}\r\n  </>\r\n);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = ({ location }) => (\r\n  <>\r\n    <p>Page not found for {location.pathname}</p>\r\n    <Link to=\"/\">Go Home</Link>\r\n  </>\r\n);\r\n\r\nexport const NotFoundScreen = NotFound;\r\n","import React from \"react\";\r\nimport { CreateUserContainer, MenuContainer } from \"../components\";\r\n\r\nexport const NewUserScreen = () => (\r\n  <>\r\n    <MenuContainer />\r\n    <h2>Your favorite microblogging platform</h2>\r\n    <CreateUserContainer />\r\n  </>\r\n);\r\n","import { connect } from \"react-redux\";\r\nimport { messagesIn } from \"../../redux/actions/messages\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: !!state.auth.isAuthenticated,\r\n  content: state.messages.messageList,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  messagesIn,\r\n};\r\n\r\nexport const enhancer = connect(mapStateToProps, mapDispatchToProps);\r\n","import { connect } from \"react-redux\";\r\nimport { messagesIn } from \"../../redux/actions/messages\";\r\n\r\n// https://react-redux.js.org/using-react-redux/connect-mapstate#connect-extracting-data-with-mapstatetoprops\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: !!state.auth.isAuthenticated,\r\n  loading: state.auth.loading,\r\n  error: state.auth.error,\r\n});\r\n\r\n//react-redux.js.org/using-react-redux/connect-mapdispatch#connect-dispatching-actions-with-mapdispatchtoprops\r\nconst mapDispatchToProps = {\r\n  messagesIn,\r\n};\r\n\r\nexport const enhancer = connect(mapStateToProps, mapDispatchToProps);\r\n","import { connect } from \"react-redux\";\r\nimport { sendlike, removeLike } from \"../../redux/actions/Actions\";\r\nimport { messagesIn } from \"../../redux/actions/messages\";\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    like: state.likes,\r\n    loading: state.loading,\r\n    username: state.auth.username,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  // onLikesUp: () => dispatch(actionCreator.likesup(1)),\r\n  // onLikesDown: () => dispatch(actionCreator.likesDown(1)),\r\n  sendlike,\r\n  removeLike,\r\n  messagesIn,\r\n};\r\n\r\nexport const enhancer = connect(mapStateToProps, mapDispatchToProps);\r\n","import api from \"../../utils/api\";\r\n\r\n// Like CONSTANTS\r\nexport const SEND_LIKES = \"ACTIONS/SEND_LIKES\";\r\nexport const SEND_LIKES_SUCCESS = \"ACTIONS/SEND_LIKES_SUCCESS\";\r\nexport const SEND_LIKES_FAILURE = \"ACTIONS/SEND_LIKES_FAILURE\";\r\nexport const REMOVE_LIKES = \"REMOVE_LIKES\";\r\nexport const REMOVE_LIKES_FAILURE = \"REMOVE_LIKES_FAILURE\";\r\nexport const REMOVE_LIKES_SUCCESS = \"REMOVE_LIKES_SUCCESS\";\r\n\r\nexport const loading = () => {\r\n  return {\r\n    type: \"LOADING\",\r\n  };\r\n};\r\n\r\nexport const sendlike = (messageid) => async (dispatch, getState) => {\r\n  try {\r\n    console.log(\"sent data: \" + messageid);\r\n    const sendingVar = {\r\n      messageId: messageid,\r\n    };\r\n    dispatch({ type: SEND_LIKES });\r\n    const payload = await api.like(sendingVar);\r\n    console.log(payload);\r\n    dispatch({ type: SEND_LIKES_SUCCESS, payload });\r\n  } catch (err) {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const removeLike = (likeId) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: REMOVE_LIKES });\r\n    console.log(likeId);\r\n    const payload = await api.removeLike(likeId);\r\n    console.log(payload);\r\n    dispatch({ type: REMOVE_LIKES_SUCCESS, payload });\r\n  } catch (err) {\r\n    return;\r\n  }\r\n};\r\n","import { enhancer } from \"./Likes.enhancer\";\r\nimport LikesButton from \"./Likes\";\r\n\r\nexport const LikesButtonContainer = enhancer(LikesButton);\r\n","// TODO: implement\r\nimport React, { Component } from \"react\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\n\r\nclass LikesButton extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          <ul>\r\n            {this.props.array &&\r\n              this.props.array.map((array, index) => {\r\n                return (\r\n                  <li key={index} content={array.username}>\r\n                    {array.username}\r\n                    <br />\r\n                    {this.props.name === array.username}\r\n\r\n                    {this.props.username === array.username && (\r\n                      <Button\r\n                        color=\"red\"\r\n                        size=\"tiny\"\r\n                        onClick={async () => {\r\n                          await this.props.removeLike(array.id);\r\n                          this.props.messagesIn();\r\n                        }}\r\n                      >\r\n                        Remove Like!\r\n                      </Button>\r\n                    )}\r\n                  </li>\r\n                );\r\n              })}\r\n            <Button\r\n              inverted\r\n              color=\"blue\"\r\n              // animated=\"vertical\"\r\n              onClick={async () => {\r\n                await this.props.sendlike(this.props.id);\r\n                this.props.messagesIn();\r\n              }}\r\n            >\r\n              <Button.Content hidden>Like!</Button.Content>\r\n              <Button.Content visible>\r\n                <Icon name=\"heart\" />\r\n              </Button.Content>\r\n            </Button>\r\n          </ul>\r\n        </div>\r\n\r\n        {/* <Button onClick={this.props.sendlike(this.props.id)}>\r\n          like\r\n          {/* // onClick={() => console.log(this.props.id)}> Like */}\r\n        {/* </Button> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LikesButton;\r\n","import { enhancer } from \"./MessageDisplayCard.enhancer\";\r\nimport { MessageDisplayCard } from \"./MessageDisplayCard\";\r\n\r\nexport const MessageDisplayCardContainer = enhancer(MessageDisplayCard);\r\n","import React from \"react\";\r\nimport ProptTypes from \"prop-types\";\r\nimport { List, Card } from \"semantic-ui-react\";\r\nimport { LikesButtonContainer } from \"../Likes\";\r\nexport const MessageDisplayCard = (messageList, isAuthenticated) => {\r\n  console.log(messageList);\r\n  return (\r\n    <Card\r\n      className=\"ui cards\"\r\n      style={{\r\n        border: \"2px solid black\",\r\n        paddingleft: \"10px\",\r\n        height: \"275px\",\r\n        width: \"400px\",\r\n        backgroundColor: \"lavender\",\r\n        borderRadius: \"10%\",\r\n      }}\r\n    >\r\n      <div id=\"message-card\">\r\n        <List className=\"content\">\r\n          <img\r\n            class=\"right floated tiny ui image\"\r\n            src={\r\n              `https://kwitter-api.herokuapp.com/users/${messageList.content.username}/picture` ||\r\n              null\r\n            }\r\n            alt=\"\"\r\n          />\r\n          <h3 className=\"header\">\r\n            {JSON.stringify(messageList.content.username)}-\r\n          </h3>\r\n          <p>{messageList.content.text}</p>\r\n          <div className=\"meta\">{messageList.content.timestamp}</div>\r\n          <LikesButtonContainer\r\n            array={messageList.content.likes}\r\n            id={messageList.content.id}\r\n            name={messageList.content.username}\r\n          />\r\n        </List>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nMessageDisplayCard.propTypes = {\r\n  content: ProptTypes.object,\r\n  messsageList: ProptTypes.array,\r\n  isAuthenticated: ProptTypes.bool.isRequired,\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { messagesOut, messagesIn } from \"../../redux/actions/messages\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: !!state.auth.isAuthenticated,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  messagesOut,\r\n  messagesIn,\r\n};\r\n\r\nexport const enhancer = connect(mapStateToProps, mapDispatchToProps);\r\n","import { enhancer } from \"./MessagesOut.enhancer\";\r\nimport { MessagesOut } from \"./MessagesOut\";\r\n\r\nexport const MessagesOutContainer = enhancer(MessagesOut);\r\n","import React, { useState } from \"react\";\r\nimport ProptTypes from \"prop-types\";\r\nimport { Loader } from \"../loader\";\r\nimport { Button, Label, Input, Form } from \"semantic-ui-react\";\r\n\r\nexport const MessagesOut = ({ messagesOut, loading, error, messagesIn }) => {\r\n  // Not to be confused with \"this.setState\" in classes\r\n  const [state, setState] = useState({\r\n    inputField: \"?\",\r\n  });\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(state);\r\n    messagesOut(state.inputField);\r\n    messagesIn();\r\n  };\r\n  const handleChange = (event) => {\r\n    const inputValue = event.target.value;\r\n    setState((prevState) => ({ inputField: inputValue }));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Form id=\"messages-out\" onSubmit={handleSubmit}>\r\n        <Label color=\"blue\" size=\"massive\" htmlFor=\"Messages\">\r\n          Messages\r\n        </Label>\r\n        <Input\r\n          size=\"massive\"\r\n          icon=\"comment\"\r\n          placeholder=\"Enter Message Here\"\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={state.text}\r\n          autoFocus\r\n          required\r\n          onChange={handleChange}\r\n        />\r\n        <Button color=\"blue\" size=\"massive\" type=\"submit\" disabled={loading}>\r\n          Send\r\n        </Button>\r\n      </Form>\r\n      {loading && <Loader />}\r\n      {error && <p style={{ color: \"red\" }}>{error.message}</p>}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nMessagesOut.propTypes = {\r\n  loading: ProptTypes.bool,\r\n  error: ProptTypes.string,\r\n  messagesOut: ProptTypes.func.isRequired,\r\n  messagesIn: ProptTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport ProptTypes from \"prop-types\";\r\nimport \"./MessagesIn.css\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { MessageDisplayCardContainer } from \"../MessageDisplayCard\";\r\nimport { MessagesOutContainer } from \"../MessagesOut\";\r\n\r\nexport const MessagesIn = ({ messagesIn, content, messageList = \"\" }) => {\r\n  return (\r\n    <>\r\n      <div id=\"menu\">\r\n        <div>\r\n          <MessagesOutContainer />\r\n          <Button color=\"black\" size=\"massive\" onClick={() => messagesIn()}>\r\n            Refresh Message Feed\r\n          </Button>\r\n          <hr />\r\n          <div id=\"content\">\r\n            {messageList}\r\n            {content.map((content, index) => {\r\n              return (\r\n                <>\r\n                  <MessageDisplayCardContainer\r\n                    key={index}\r\n                    index={index}\r\n                    content={content}\r\n                  ></MessageDisplayCardContainer>\r\n                </>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nMessagesIn.defaultProps = {};\r\n\r\nMessagesIn.propTypes = {\r\n  isAuthenticated: ProptTypes.bool.isRequired,\r\n  messagesIn: ProptTypes.func.isRequired,\r\n  messsageList: ProptTypes.array.isRequired,\r\n};\r\n","import { enhancer } from \"./MessagesIn.enhancer\";\r\nimport { MessagesIn } from \"./MessagesIn\";\r\n\r\nexport const MessagesInContainer = enhancer(MessagesIn);\r\n","import React from \"react\";\r\nimport { MenuContainer } from \"../components\";\r\nimport { MessagesInContainer } from \"../components/MessagesIn\";\r\n// import { MessagesOutContainer } from \"../components/MessagesOut\";\r\n\r\nexport const MessageFeedScreen = () => (\r\n  <>\r\n    <MenuContainer />\r\n    <br />\r\n    <MessagesInContainer />\r\n  </>\r\n);\r\n","import React from \"react\";\r\nimport ProptTypes from \"prop-types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\n/*\r\n * ConnectedRoute is a component that renders Routes for you\r\n * It uses the auth store in redux to determine if a route should be rendered\r\n * or redirected else where based on the auth status\r\n */\r\nexport function ConnectedRoute({\r\n  isProtected,\r\n  redirectIfAuthenticated,\r\n  component: ComponentToRender,\r\n  ...rest\r\n}) {\r\n  if (!ComponentToRender) {\r\n    throw new Error(\"ConnectedRoute MUST have a prop named 'component'\");\r\n  }\r\n\r\n  // https://react-redux.js.org/api/hooks#useselector\r\n  const { isAuthenticated, username } = useSelector((state) => ({\r\n    username: state.auth.username,\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n  }));\r\n\r\n  if (redirectIfAuthenticated && isAuthenticated) {\r\n    return (\r\n      <Route\r\n        {...rest}\r\n        render={({ location }) => (\r\n          <Redirect\r\n            to={{\r\n              pathname: `/profiles/${username}`,\r\n              state: { from: location },\r\n            }}\r\n          />\r\n        )}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isProtected === null || (isProtected && isAuthenticated)) {\r\n    return (\r\n      <Route\r\n        {...rest}\r\n        render={(renderedProps) => <ComponentToRender {...renderedProps} />}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) => (\r\n        <Redirect\r\n          to={{\r\n            pathname: `/`,\r\n            state: { from: location },\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\nConnectedRoute.defaultProps = {\r\n  isProtected: null,\r\n};\r\n// https://reactjs.org/docs/typechecking-with-proptypes.html\r\nConnectedRoute.propTypes = {\r\n  isProtected: ProptTypes.bool,\r\n  redirectIfAuthenticated: ProptTypes.bool,\r\n  component: ProptTypes.elementType.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch } from \"react-router-dom\";\r\nimport {\r\n  HomeScreen,\r\n  ProfileScreen,\r\n  NotFoundScreen,\r\n  NewUserScreen,\r\n  MessageFeedScreen,\r\n} from \"../../screens\";\r\nimport { ConnectedRoute } from \"../connected-route/ConnectedRoute\";\r\n\r\nexport const Navigation = () => (\r\n  <div className=\"body\">\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <ConnectedRoute\r\n          exact\r\n          path=\"/\"\r\n          redirectIfAuthenticated\r\n          component={HomeScreen}\r\n        />\r\n        {/* /newuser isn't connected */}\r\n        <ConnectedRoute exact path=\"/newuser\" component={NewUserScreen} />\r\n        <ConnectedRoute\r\n          exact\r\n          path=\"/messagefeed\"\r\n          component={MessageFeedScreen}\r\n        />\r\n\r\n        <ConnectedRoute\r\n          exact\r\n          isProtected\r\n          path=\"/profiles/:username\"\r\n          component={ProfileScreen}\r\n        />\r\n        <ConnectedRoute path=\"*\" component={NotFoundScreen} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  </div>\r\n);\r\n","import { connect } from \"react-redux\";\r\nimport { newUser } from \"../../redux/actions/auth\";\r\n\r\n// https://react-redux.js.org/using-react-redux/connect-mapstate#connect-extracting-data-with-mapstatetoprops\r\nconst mapStateToProps = (state) => ({\r\n  loading: state.auth.loading,\r\n  error: state.auth.error,\r\n});\r\n\r\n// https://react-redux.js.org/using-react-redux/connect-mapdispatch#connect-dispatching-actions-with-mapdispatchtoprops\r\nconst mapDispatchToProps = {\r\n  newUser,\r\n};\r\n\r\nexport const enhancer = connect(mapStateToProps, mapDispatchToProps);\r\n","import { enhancer } from \"./CreateUser.enhancer\";\r\nimport { CreateUser } from \"./CreateUser\";\r\n\r\nexport const CreateUserContainer = enhancer(CreateUser);\r\n\r\n// export * from \"./CreateUser\";\r\n","import React, { useState } from \"react\";\r\nimport ProptTypes from \"prop-types\";\r\nimport { Loader } from \"../loader\";\r\n// import { newUser } from \"../../redux/actions\";\r\n\r\n// console.log(\"newuser is : \" + newUser.toString());\r\nexport const CreateUser = ({ newUser, loading, error }) => {\r\n  // Not to be confused with \"this.setState\" in classes\r\n  const [state, setState] = useState({\r\n    username: \"\",\r\n    displayName: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const handleNewUser = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"state: \" + JSON.stringify(state));\r\n    console.log(event);\r\n    newUser(state);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    // console.log(\"event: \" + JSON.stringify(foo));\r\n    const inputName = event.target.name;\r\n    const inputValue = event.target.value;\r\n    setState((prevState) => ({ ...prevState, [inputName]: inputValue }));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form id=\"login-form\" onSubmit={handleNewUser}>\r\n        <label htmlFor=\"username\">Username</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={state.username}\r\n          autoFocus\r\n          required\r\n          onChange={handleChange}\r\n        />\r\n        <label htmlFor=\"displayName\">displayName</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"displayName\"\r\n          value={state.displayName}\r\n          required\r\n          onChange={handleChange}\r\n        />\r\n        <label htmlFor=\"password\">Password</label>\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={state.password}\r\n          required\r\n          onChange={handleChange}\r\n        />\r\n        <button type=\"submit\" disabled={loading}>\r\n          create user\r\n        </button>\r\n      </form>\r\n      {loading && <Loader />}\r\n      {error && <p style={{ color: \"red\" }}>{error.message}</p>}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nCreateUser.propTypes = {\r\n  newUser: ProptTypes.func.isRequired,\r\n  loading: ProptTypes.bool,\r\n  error: ProptTypes.string,\r\n};\r\n","import {\r\n  LOGIN,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILURE,\r\n  LOGOUT,\r\n  NEW_USER,\r\n  NEW_USER_SUCCESS,\r\n} from \"../actions\";\r\n\r\n// INITIAL STATE\r\nconst INITIAL_STATE = {\r\n  isAuthenticated: false,\r\n  username: \"\",\r\n  loading: false,\r\n  error: \"\",\r\n};\r\n\r\nexport const authReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case LOGIN:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        loading: true,\r\n      };\r\n    case LOGIN_SUCCESS:\r\n      const { username, token } = action.payload;\r\n      return {\r\n        ...INITIAL_STATE,\r\n        isAuthenticated: token,\r\n        username,\r\n        loading: false,\r\n      };\r\n    case LOGIN_FAILURE:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        error: action.payload,\r\n        loading: false,\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        ...INITIAL_STATE,\r\n      };\r\n    case NEW_USER: // new file ?\r\n      return {\r\n        ...INITIAL_STATE,\r\n        loading: true,\r\n      };\r\n    case NEW_USER_SUCCESS:\r\n      // const { newusername, displayName, password } = action.payload; // test\r\n      return {\r\n        ...INITIAL_STATE,\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// TODO: implement\r\nimport {\r\n  GET_MESSAGES,\r\n  GET_MESSAGES_SUCCESS,\r\n  GET_MESSAGES_FAILURE,\r\n  SEND_MESSAGES,\r\n  SEND_MESSAGES_SUCCESS,\r\n  SEND_MESSAGES_FAILURE,\r\n} from \"../actions\";\r\n\r\n// INITIAL STATE\r\nconst INITIAL_STATE = {\r\n  messageList: [\"one\"],\r\n  loading: false,\r\n  error: \"\",\r\n};\r\n\r\nexport const messagesReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case GET_MESSAGES:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        loading: true,\r\n      };\r\n    case GET_MESSAGES_SUCCESS:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        messageList: action.payload.messages,\r\n        loading: false,\r\n      };\r\n    case GET_MESSAGES_FAILURE:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        error: action.payload,\r\n        loading: false,\r\n      };\r\n    case SEND_MESSAGES:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        loading: true,\r\n      };\r\n    case SEND_MESSAGES_SUCCESS:\r\n      return {\r\n        state,\r\n      };\r\n    case SEND_MESSAGES_FAILURE:\r\n      return { state };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// TODO: implement\r\n// switch statements to handle new users\r\nimport {\r\n  GETUSERINFO,\r\n  GETUSERINFO_SUCCESS,\r\n  GETUSERINFO_FAILURE,\r\n} from \"../actions\";\r\n\r\n\r\n//import { NEW_USER } from \"../actions\";\r\n\r\n// INITIAL STATE\r\nconst INITIAL_STATE = {\r\n  isAuthenticated: false,\r\n  username: \"\",\r\n  loading: false,\r\n  error: \"\",\r\n  user:{},\r\n};\r\n\r\nexport const userReducer= (state = INITIAL_STATE, action) =>{\r\n  switch (action.type) {\r\n    case GETUSERINFO:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        loading: true,\r\n      };\r\n    case GETUSERINFO_SUCCESS:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        user: action.payload,\r\n        loading: false,\r\n      };\r\n    case GETUSERINFO_FAILURE:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        error: action.payload,\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n//export const newUserReducer = (state = INITIAL_STATE, action) => {\r\n // switch (\r\n  //  action.type\r\n    // case LOGIN:\r\n    //   return {\r\n    //     ...INITIAL_STATE,\r\n    //     loading: true,\r\n    //   };\r\n    // case LOGIN_SUCCESS:\r\n    //   const { username, token } = action.payload;\r\n    //   return {\r\n    //     ...INITIAL_STATE,\r\n    //     isAuthenticated: token,\r\n    //     username,\r\n    //     loading: false,\r\n    //   };\r\n    // case LOGIN_FAILURE:\r\n    //   return {\r\n    //     ...INITIAL_STATE,\r\n    //     error: action.payload,\r\n    //     loading: false,\r\n    //   };\r\n    // case LOGOUT:\r\n    //   return {\r\n    //     ...INITIAL_STATE,\r\n    //   };\r\n    // default:\r\n    //   return state;\r\n // ) {\r\n//  }\r\n//};\r\n","import {\r\n  SEND_LIKES,\r\n  SEND_LIKES_SUCCESS,\r\n  SEND_LIKES_FAILURE,\r\n  REMOVE_LIKES,\r\n  REMOVE_LIKES_FAILURE,\r\n  REMOVE_LIKES_SUCCESS,\r\n} from \"../actions\";\r\n\r\nconst INITIAL_STATE = {\r\n  loading: false,\r\n  error: \"\",\r\n};\r\n\r\nexport const likesReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case SEND_LIKES:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        loading: true,\r\n      };\r\n    case SEND_LIKES_SUCCESS:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        // isAuthenticated: token,\r\n        loading: false,\r\n      };\r\n    case SEND_LIKES_FAILURE:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        error: action.payload,\r\n        loading: false,\r\n      };\r\n    case REMOVE_LIKES:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        // isAuthenticated: token,\r\n        loading: true,\r\n      };\r\n    case REMOVE_LIKES_SUCCESS:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        // error: action.payload,\r\n        loading: false,\r\n      };\r\n    case REMOVE_LIKES_FAILURE:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        error: action.payload,\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { authReducer } from \"./auth\";\r\nimport { messagesReducer } from \"./messages\";\r\nimport { userReducer } from \"./users\";\r\nimport { likesReducer } from \"./likes\";\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  messages: messagesReducer,\r\n  users: userReducer,\r\n  likes: likesReducer,\r\n});\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\nexport default function configureStore(preloadedState) {\r\n  const store = createStore(\r\n    persistedReducer,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n  );\r\n  const persistor = persistStore(store);\r\n  return { store, persistor };\r\n}\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { Navigation } from \"./components\";\r\nimport configureStore from \"./redux/configureStore\";\r\nimport \"./App.css\";\r\nconst { store, persistor } = configureStore();\r\n\r\nconst KWITTER = {\r\n  store,\r\n  persistor,\r\n};\r\n\r\nwindow.KWITTER = KWITTER;\r\n\r\nexport const App = () => (\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <Navigation />\r\n    </PersistGate>\r\n  </Provider>\r\n);\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { App } from \"./App\";\r\n// import { createStore, applyMiddleware } from \"redux\";\r\n// import reducer from \"./reducers/reducer\";\r\n// import thunk from \"redux-thunk\";\r\n\r\n// const Store = createStore(reducer, applyMiddleware(thunk));\r\nrender(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}